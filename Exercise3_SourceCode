package edu.stanford.cs246.wordcount;

import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;

import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.commons.lang.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;


public class FriendRecommender{

    public static void main(String[]args) throws Exception{
    	Configuration config = new Configuration();
        Job job = Job.getInstance(config,"FriendRecommender");
        
        job.setJarByClass(FriendRecommender.class);
        job.setOutputValueClass(Text.class);
        job.setOutputKeyClass(IntWritable.class);
       
        job.setMapperClass(Map.class);
        job.setReducerClass(Reduce.class);
        
        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);
        
        FileInputFormat.addInputPath(job,new Path(args[0]));
        FileOutputFormat.setOutputPath(job,new Path(args[1]));
        
        job.waitForCompletion(true);
    }

    public static class Map extends Mapper<LongWritable,Text,IntWritable,Text>{
        public void map(LongWritable key,Text data,Context context) throws IOException,InterruptedException{
            String user = data.toString();
            String[] split = user.split("\t",-1);
            if (split.length != 2) {
                return;
            }
            if (split[1].length() == 0) {
                return;
            }
            IntWritable userKey = new IntWritable(Integer.parseInt(split[0]));
            String[] friends = split[1].split(",");
            
            IntWritable keyOne = new IntWritable();
            IntWritable keyTwo = new IntWritable();
            
            Text valueOne = new Text();
            Text valueTwo = new Text();
            
            int i=0;
            while (i<friends.length) {
             
                valueOne.set("1,"+friends[i]);
                context.write(userKey,valueOne);
                keyOne.set(Integer.parseInt(friends[i]));
                valueOne.set("2,"+friends[i]);
                for (int j=i+1;j<friends.length;j++){
                  
                    keyTwo.set(Integer.parseInt(friends[j]));
                    valueTwo.set("2,"+friends[j]);
                    context.write(keyOne,valueTwo);
                    context.write(keyTwo,valueOne);
                }
                i++;
            }
        }
    }

    public static class Reduce extends Reducer<IntWritable,Text,IntWritable,Text>{
        public void reduce(IntWritable key, Iterable<Text> friendship, Context output) throws IOException,InterruptedException{
            String[] friend;
            HashMap<String,Integer>hash = new HashMap<String,Integer>();
            for (Iterator<Text> iterator = l.iterator(); iterator.hasNext(); ) {
                Text value = iterator.next();
                friend = (value.toString()).split(",");
                if (!friend[0].equals("1")) {
                    if (hash.containsKey(friend[1])) {
                        if (hash.get(friend[1]) != -1) {
                            hash.put(friend[1], hash.get(friend[1]) + 1);
                        }
                    } else {
                        hash.put(friend[1], 1);
                    }
                } else {
                    hash.put(friend[1], -1);
                }
            }
            ArrayList<Entry<String,Integer>> list = new ArrayList<Entry<String,Integer>>();
            for (Iterator<Entry<String, Integer>> iterator = hash.entrySet().iterator(); iterator.hasNext(); ) {
                Entry<String, Integer> entry = iterator.next();
                if (entry.getValue() != -1) {
                    list.add(entry);
                }
            }
            Collections.sort(list,new Comparator<Entry<String,Integer>>(){
                public int compare(Entry<String,Integer> entry1,Entry<String,Integer>entry2){
                    return entry1.getValue().compareTo(entry2.getValue());
                }
            });
            ArrayList<Integer>sameLevel = new ArrayList<Integer>();
            ArrayList<Integer>fo = new ArrayList<Integer>();
            if(list.size()==1)  {
                output.write(key, new Text(StringUtils.join(list,",")));
            }
            else if(list.size()>1)
            {
                sameLevel.add(Integer.parseInt(list.get(0).getKey()));
                for(int i=1;i<Math.min(10,list.size());i++){
                    if(list.get(i - 1).getValue() == list.get(i).getValue()){
                        sameLevel.add(Integer.parseInt(list.get(i).getKey()));
                    }else{
                    	 Collections.sort(sameLevel);
                         for(int j=0;j<sameLevel.size();j++)
                             fo.add(sameLevel.get(j));
                         sameLevel.clear();
                         sameLevel.add(Integer.parseInt(list.get(i).getKey()));
                    }
                }
                Collections.sort(sameLevel);
                for(int j = 0; sameLevel.size() > j; j++)
                    fo.add(sameLevel.get(j));
                output.write(key,new Text(StringUtils.join(fo,",")));
            }
        }
    }


}
